'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});


var fail = function fail(why) {
  return { result: false, reason: why };
};

var check = function check(_ip) {
  return false;
};

var letterFilter = new RegExp('^[0-9\\.]+$');

var is_quad_ex = function is_quad_ex(ip) {

  if (!(typeof ip === 'string')) {
    return fail('All quads are strings');
  }

  if (!letterFilter.test(ip)) {
    return fail('A quad may only contain 0-9 and period');
  }

  var quad = ip.split('.');
  if (!(quad.length === 4)) {
    return fail('All complete quads have four bytes separated by periods');
  }

  for (var i = 0; i < 4; ++i) {
    // eslint-disable-line fp/no-loops

    var b = quad[i];
    if (b.length === 0) {
      return fail('Byte ' + i + ' must not be empty');
    }

    var bt = parseInt(b, 10);

    // needn't check below zero, because character filter prevents minus signs
    if (bt > 255) {
      return fail('Byte ' + i + ' must be below 256');
    }

    if (b[0] === '0' && bt > 0) {
      return fail('Nonzero byte ' + i + ' must not begin with zero');
    }

    if (b.length > 1 && bt === 0) {
      return fail('Zero byte ' + i + ' must not have multiple zeroes');
    }
  }

  return { result: true };
};

var is_quad = function is_quad(ip) {
  return is_quad_ex(ip).result;
};

var is_integer = function is_integer(ip) {
  return Number.isInteger(ip) && ip >= 0 && ip <= 4294967295;
}; // 255.255.255.255


exports.is_quad = is_quad;
exports.is_quad_ex = is_quad_ex;
exports.is_integer = is_integer;
exports.check = check;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9qcy9pc19pcHY0LmpzIl0sIm5hbWVzIjpbImZhaWwiLCJ3aHkiLCJyZXN1bHQiLCJyZWFzb24iLCJjaGVjayIsIl9pcCIsImxldHRlckZpbHRlciIsIlJlZ0V4cCIsImlzX3F1YWRfZXgiLCJpcCIsInRlc3QiLCJxdWFkIiwic3BsaXQiLCJsZW5ndGgiLCJpIiwiYiIsImJ0IiwicGFyc2VJbnQiLCJpc19xdWFkIiwiaXNfaW50ZWdlciIsIk51bWJlciIsImlzSW50ZWdlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQWNBLElBQU1BLE9BQWlCLFNBQWpCQSxJQUFpQixDQUFDQyxHQUFEO0FBQUEsU0FBMEIsRUFBRUMsUUFBUSxLQUFWLEVBQWlCQyxRQUFRRixHQUF6QixFQUExQjtBQUFBLENBQXZCOztBQU1BLElBQU1HLFFBQWtCLFNBQWxCQSxLQUFrQixDQUFDQyxHQUFEO0FBQUEsU0FBc0IsS0FBdEI7QUFBQSxDQUF4Qjs7QUFNQSxJQUFNQyxlQUF1QixJQUFJQyxNQUFKLENBQVcsYUFBWCxDQUE3Qjs7QUFNQSxJQUFNQyxhQUF1QixTQUF2QkEsVUFBdUIsQ0FBQ0MsRUFBRCxFQUFvQjs7QUFFL0MsTUFBSSxFQUFHLE9BQU9BLEVBQVAsS0FBZSxRQUFsQixDQUFKLEVBQWtDO0FBQ2hDLFdBQU9ULEtBQUssdUJBQUwsQ0FBUDtBQUNEOztBQUVELE1BQUksQ0FBR00sYUFBYUksSUFBYixDQUFrQkQsRUFBbEIsQ0FBUCxFQUFnQztBQUM5QixXQUFPVCxLQUFLLHdDQUFMLENBQVA7QUFDRDs7QUFHRCxNQUFNVyxPQUFzQkYsR0FBR0csS0FBSCxDQUFTLEdBQVQsQ0FBNUI7QUFDQSxNQUFJLEVBQUVELEtBQUtFLE1BQUwsS0FBZ0IsQ0FBbEIsQ0FBSixFQUEwQjtBQUFFLFdBQU9iLEtBQUsseURBQUwsQ0FBUDtBQUF5RTs7QUFHckcsT0FBSyxJQUFJYyxJQUFZLENBQXJCLEVBQXdCQSxJQUFFLENBQTFCLEVBQTZCLEVBQUVBLENBQS9CLEVBQWtDO0FBQUU7O0FBRWxDLFFBQU1DLElBQVlKLEtBQUtHLENBQUwsQ0FBbEI7QUFDQSxRQUFJQyxFQUFFRixNQUFGLEtBQWEsQ0FBakIsRUFBb0I7QUFBRSxhQUFPYixlQUFhYyxDQUFiLHdCQUFQO0FBQTZDOztBQUVuRSxRQUFNRSxLQUFhQyxTQUFTRixDQUFULEVBQVksRUFBWixDQUFuQjs7QUFFQTtBQUNBLFFBQUlDLEtBQUssR0FBVCxFQUFjO0FBQUUsYUFBT2hCLGVBQWFjLENBQWIsd0JBQVA7QUFBNkM7O0FBRTdELFFBQUtDLEVBQUUsQ0FBRixNQUFTLEdBQVYsSUFBbUJDLEtBQUssQ0FBNUIsRUFBZ0M7QUFDOUIsYUFBT2hCLHVCQUFxQmMsQ0FBckIsK0JBQVA7QUFDRDs7QUFFRCxRQUFLQyxFQUFFRixNQUFGLEdBQVcsQ0FBWixJQUFtQkcsT0FBTyxDQUE5QixFQUFrQztBQUNoQyxhQUFPaEIsb0JBQWtCYyxDQUFsQixvQ0FBUDtBQUNEO0FBRUY7O0FBR0QsU0FBTyxFQUFFWixRQUFRLElBQVYsRUFBUDtBQUVELENBdENEOztBQTRDQSxJQUFNZ0IsVUFBb0IsU0FBcEJBLE9BQW9CLENBQUNULEVBQUQ7QUFBQSxTQUFxQkQsV0FBV0MsRUFBWCxFQUFlUCxNQUFwQztBQUFBLENBQTFCOztBQU1BLElBQU1pQixhQUF1QixTQUF2QkEsVUFBdUIsQ0FBQ1YsRUFBRDtBQUFBLFNBRXhCVyxPQUFPQyxTQUFQLENBQWlCWixFQUFqQixDQUFELElBQ0NBLE1BQU0sQ0FEUCxJQUVDQSxNQUFNLFVBSmtCO0FBQUEsQ0FBN0IsQyxDQUl3Qjs7O1FBU3BCUyxPLEdBQUFBLE87UUFDRVYsVSxHQUFBQSxVO1FBS0ZXLFUsR0FBQUEsVTtRQXFDQWYsSyxHQUFBQSxLIiwiZmlsZSI6ImlzX2lwdjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHtcblxuICBJcCxcbiAgUmVzdWx0XG5cbn0gZnJvbSAnLi90eXBlcyc7XG5cblxuXG5cblxuY29uc3QgZmFpbDogRnVuY3Rpb24gPSAod2h5OiBzdHJpbmcpOiBSZXN1bHQgPT4gKHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiB3aHkgfSk7XG5cblxuXG5cblxuY29uc3QgY2hlY2s6IEZ1bmN0aW9uID0gKF9pcDogSXApOiBib29sZWFuID0+IGZhbHNlO1xuXG5cblxuXG5cbmNvbnN0IGxldHRlckZpbHRlcjogUmVnRXhwID0gbmV3IFJlZ0V4cCgnXlswLTlcXFxcLl0rJCcpO1xuXG5cblxuXG5cbmNvbnN0IGlzX3F1YWRfZXg6IEZ1bmN0aW9uID0gKGlwOiBJcCk6IFJlc3VsdCA9PiB7XG5cbiAgaWYgKCEoIHR5cGVvZihpcCkgPT09ICdzdHJpbmcnICkpIHtcbiAgICByZXR1cm4gZmFpbCgnQWxsIHF1YWRzIGFyZSBzdHJpbmdzJyk7XG4gIH1cblxuICBpZiAoISggbGV0dGVyRmlsdGVyLnRlc3QoaXApICkpIHtcbiAgICByZXR1cm4gZmFpbCgnQSBxdWFkIG1heSBvbmx5IGNvbnRhaW4gMC05IGFuZCBwZXJpb2QnKTtcbiAgfVxuXG5cbiAgY29uc3QgcXVhZDogQXJyYXk8c3RyaW5nPiA9IGlwLnNwbGl0KCcuJyk7XG4gIGlmICghKHF1YWQubGVuZ3RoID09PSA0KSkgeyByZXR1cm4gZmFpbCgnQWxsIGNvbXBsZXRlIHF1YWRzIGhhdmUgZm91ciBieXRlcyBzZXBhcmF0ZWQgYnkgcGVyaW9kcycpOyB9XG5cblxuICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpPDQ7ICsraSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZwL25vLWxvb3BzXG5cbiAgICBjb25zdCBiOiBzdHJpbmcgPSBxdWFkW2ldO1xuICAgIGlmIChiLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gZmFpbChgQnl0ZSAke2l9IG11c3Qgbm90IGJlIGVtcHR5YCk7IH1cblxuICAgIGNvbnN0IGJ0OiBudW1iZXIgPSBwYXJzZUludChiLCAxMCk7XG5cbiAgICAvLyBuZWVkbid0IGNoZWNrIGJlbG93IHplcm8sIGJlY2F1c2UgY2hhcmFjdGVyIGZpbHRlciBwcmV2ZW50cyBtaW51cyBzaWduc1xuICAgIGlmIChidCA+IDI1NSkgeyByZXR1cm4gZmFpbChgQnl0ZSAke2l9IG11c3QgYmUgYmVsb3cgMjU2YCk7IH1cblxuICAgIGlmICgoYlswXSA9PT0gJzAnKSAmJiAoYnQgPiAwKSkge1xuICAgICAgcmV0dXJuIGZhaWwoYE5vbnplcm8gYnl0ZSAke2l9IG11c3Qgbm90IGJlZ2luIHdpdGggemVyb2ApO1xuICAgIH1cblxuICAgIGlmICgoYi5sZW5ndGggPiAxKSAmJiAoYnQgPT09IDApKSB7XG4gICAgICByZXR1cm4gZmFpbChgWmVybyBieXRlICR7aX0gbXVzdCBub3QgaGF2ZSBtdWx0aXBsZSB6ZXJvZXNgKTtcbiAgICB9XG5cbiAgfVxuXG5cbiAgcmV0dXJuIHsgcmVzdWx0OiB0cnVlIH07XG5cbn07XG5cblxuXG5cblxuY29uc3QgaXNfcXVhZDogRnVuY3Rpb24gPSAoaXA6IElwKTogYm9vbGVhbiA9PiBpc19xdWFkX2V4KGlwKS5yZXN1bHQ7XG5cblxuXG5cblxuY29uc3QgaXNfaW50ZWdlcjogRnVuY3Rpb24gPSAoaXA6IG51bWJlcik6IGJvb2xlYW4gPT5cblxuICAgIChOdW1iZXIuaXNJbnRlZ2VyKGlwKSlcbiAmJiAoaXAgPj0gMClcbiAmJiAoaXAgPD0gNDI5NDk2NzI5NSk7IC8vIDI1NS4yNTUuMjU1LjI1NVxuXG5cblxuXG5leHBvcnQge1xuXG4vLyAgICBpc19zaW1wbGUsXG5cbiAgICBpc19xdWFkLFxuICAgICAgaXNfcXVhZF9leCxcblxuLy8gICAgaXNfaW5jb21wbGV0ZV9xdWFkLFxuLy8gICAgICBpc19pbmNvbXBsZXRlX3F1YWRfZXgsXG5cbiAgICBpc19pbnRlZ2VyLFxuXG4gLy8gICAgaXNfY29tcGxleCwgIC8vIGhhcyBwb3J0IG9yIHN1Ym5ldCBtYXNrXG4gLy8gICAgaXNfY29tcGxleF9xdWFkLFxuIC8vICAgIGlzX2NvbXBsZXhfaW50ZWdlcixcblxuIC8vICAgIGFzX3F1YWQsXG4gLy8gICAgYXNfaW50ZWdlcixcblxuIC8vICAgIGlzX3JhbmdlLFxuIC8vICAgIGlzX2N1cnJlbnRfbmV0d29yayxcblxuIC8vICAgIGlzX3NwZWNpYWwsXG4gLy8gICAgaXNfbG9vcGJhY2ssXG4gLy8gICAgaXNfbGlua19sb2NhbCxcbiAvLyAgICBpc19pZXRmX3Byb3RvY29sLFxuIC8vICAgIGlzX2lwdjZfdG9faXB2NF9yZWxheSxcbiAvLyAgICBpc19iZW5jaG1hcmssXG5cbiAvLyAgICBpc190ZXN0bmV0LFxuIC8vICAgICAgaXNfdGVzdG5ldF8xLFxuIC8vICAgICAgaXNfdGVzdG5ldF8yLFxuIC8vICAgICAgaXNfdGVzdG5ldF8zLFxuXG4gLy8gICAgaXNfcHJpdmF0ZSxcbiAvLyAgICAgIGlzX3ByaXZhdGVfMTAsXG4gLy8gICAgICBpc19wcml2YXRlXzE3MixcbiAvLyAgICAgIGlzX3ByaXZhdGVfMTkyLFxuXG4gLy8gICAgaXNfc2hhcmVkLFxuIC8vICAgIGlzX2xpbmssXG4gLy8gICAgaXNfbXVsdGljYXN0LFxuIC8vICAgIGlzX2Jyb2FkY2FzdCxcbiAvLyAgICBpc19zdWJuZXQsXG4gLy8gICAgaXNfc3VibmV0X2Jyb2FkY2FzdCxcbiAvLyAgICBpc19yZXNlcnZlZCxcblxuICAgIGNoZWNrXG5cbn07XG4iXX0=