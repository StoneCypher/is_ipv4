'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var fail = function fail(why) {
  return { result: false, reason: why };
};

var check = function check(_ip) {
  return false;
};

var letterFilter = new RegExp('^[0-9\\.]+$');

var is_quad_ex = function is_quad_ex(ip) {

  if (!(typeof ip === 'string')) {
    return fail('All quads are strings');
  }

  if (!letterFilter.test(ip)) {
    return fail('A quad may only contain 0-9 and period');
  }

  var quad = ip.split('.');
  if (!(quad.length === 4)) {
    return fail('All complete quads have four bytes separated by periods');
  }

  for (var i = 0; i < 4; ++i) {
    // eslint-disable-line fp/no-loops

    var b = quad[i];
    if (b.length === 0) {
      return fail('Byte ' + i + ' must not be empty');
    }

    var bt = parseInt(b, 10);

    // needn't check below zero, because character filter prevents minus signs
    if (bt > 255) {
      return fail('Byte ' + i + ' must be below 256');
    }

    if (b[0] === '0' && bt > 0) {
      return fail('Nonzero byte ' + i + ' must not begin with zero');
    }

    if (b.length > 1 && bt === 0) {
      return fail('Zero byte ' + i + ' must not have multiple zeroes');
    }
  }

  return { result: true };
};

var is_quad = function is_quad(ip) {
  return is_quad_ex(ip).result;
};

var is_integer = function is_integer(ip) {
  return Number.isInteger(ip) && ip >= 0 && ip <= 4294967295;
}; // 255.255.255.255


var integer_to_quad = function integer_to_quad(ip) {

  if (!Number.isInteger(ip)) {
    throw new TypeError('integer_to_quad accepts only integers');
  }

  return (ip >> 24 & 0xFF) + '.' + (ip >> 16 & 0xFF) + '.' + (ip >> 8 & 0xFF) + '.' + (ip & 0xFF); // eslint-disable-line no-bitwise
};

function ParsedQuad(a, b, c, d) {

  this.a = a;
  this.b = b;
  this.c = c;
  this.d = d;

  return this;
}

var parsed_quad_to_quad = function parsed_quad_to_quad(_ref) {
  var a = _ref.a,
      b = _ref.b,
      c = _ref.c,
      d = _ref.d;
  return a + '.' + b + '.' + c + '.' + d;
};

var as_quad = function as_quad(ip) {

  if (typeof ip === 'number') {
    return integer_to_quad(ip);
  } else if (ip instanceof ParsedQuad) {
    return parsed_quad_to_quad(ParsedQuad);
  } else if (is_quad(ip)) {
    return ip;
  }

  throw new Error('cannot construct quad from this input');
};

var as_parsed_quad = function as_parsed_quad(ip) {

  if (ip instanceof ParsedQuad) {
    return ip;
  }

  var bytes = as_quad(ip).split('.').map(function (s) {
    return parseInt(s, 10);
  });

  return new (Function.prototype.bind.apply(ParsedQuad, [null].concat(_toConsumableArray(bytes))))();
};

exports.is_quad = is_quad;
exports.is_quad_ex = is_quad_ex;
exports.integer_to_quad = integer_to_quad;
exports.ParsedQuad = ParsedQuad;
exports.parsed_quad_to_quad = parsed_quad_to_quad;
exports.is_integer = is_integer;
exports.as_parsed_quad = as_parsed_quad;
exports.check = check;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9qcy9pc19pcHY0LmpzIl0sIm5hbWVzIjpbImZhaWwiLCJ3aHkiLCJyZXN1bHQiLCJyZWFzb24iLCJjaGVjayIsIl9pcCIsImxldHRlckZpbHRlciIsIlJlZ0V4cCIsImlzX3F1YWRfZXgiLCJpcCIsInRlc3QiLCJxdWFkIiwic3BsaXQiLCJsZW5ndGgiLCJpIiwiYiIsImJ0IiwicGFyc2VJbnQiLCJpc19xdWFkIiwiaXNfaW50ZWdlciIsIk51bWJlciIsImlzSW50ZWdlciIsImludGVnZXJfdG9fcXVhZCIsIlR5cGVFcnJvciIsIlBhcnNlZFF1YWQiLCJhIiwiYyIsImQiLCJwYXJzZWRfcXVhZF90b19xdWFkIiwiYXNfcXVhZCIsIkVycm9yIiwiYXNfcGFyc2VkX3F1YWQiLCJieXRlcyIsIm1hcCIsInMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBY0EsSUFBTUEsT0FBaUIsU0FBakJBLElBQWlCLENBQUNDLEdBQUQ7QUFBQSxTQUEwQixFQUFFQyxRQUFRLEtBQVYsRUFBaUJDLFFBQVFGLEdBQXpCLEVBQTFCO0FBQUEsQ0FBdkI7O0FBTUEsSUFBTUcsUUFBa0IsU0FBbEJBLEtBQWtCLENBQUNDLEdBQUQ7QUFBQSxTQUFzQixLQUF0QjtBQUFBLENBQXhCOztBQU1BLElBQU1DLGVBQXVCLElBQUlDLE1BQUosQ0FBVyxhQUFYLENBQTdCOztBQU1BLElBQU1DLGFBQXVCLFNBQXZCQSxVQUF1QixDQUFDQyxFQUFELEVBQW9COztBQUUvQyxNQUFJLEVBQUcsT0FBT0EsRUFBUCxLQUFlLFFBQWxCLENBQUosRUFBa0M7QUFDaEMsV0FBT1QsS0FBSyx1QkFBTCxDQUFQO0FBQ0Q7O0FBRUQsTUFBSSxDQUFHTSxhQUFhSSxJQUFiLENBQWtCRCxFQUFsQixDQUFQLEVBQWdDO0FBQzlCLFdBQU9ULEtBQUssd0NBQUwsQ0FBUDtBQUNEOztBQUdELE1BQU1XLE9BQXNCRixHQUFHRyxLQUFILENBQVMsR0FBVCxDQUE1QjtBQUNBLE1BQUksRUFBRUQsS0FBS0UsTUFBTCxLQUFnQixDQUFsQixDQUFKLEVBQTBCO0FBQUUsV0FBT2IsS0FBSyx5REFBTCxDQUFQO0FBQXlFOztBQUdyRyxPQUFLLElBQUljLElBQVksQ0FBckIsRUFBd0JBLElBQUUsQ0FBMUIsRUFBNkIsRUFBRUEsQ0FBL0IsRUFBa0M7QUFBRTs7QUFFbEMsUUFBTUMsSUFBWUosS0FBS0csQ0FBTCxDQUFsQjtBQUNBLFFBQUlDLEVBQUVGLE1BQUYsS0FBYSxDQUFqQixFQUFvQjtBQUFFLGFBQU9iLGVBQWFjLENBQWIsd0JBQVA7QUFBNkM7O0FBRW5FLFFBQU1FLEtBQWFDLFNBQVNGLENBQVQsRUFBWSxFQUFaLENBQW5COztBQUVBO0FBQ0EsUUFBSUMsS0FBSyxHQUFULEVBQWM7QUFBRSxhQUFPaEIsZUFBYWMsQ0FBYix3QkFBUDtBQUE2Qzs7QUFFN0QsUUFBS0MsRUFBRSxDQUFGLE1BQVMsR0FBVixJQUFtQkMsS0FBSyxDQUE1QixFQUFnQztBQUM5QixhQUFPaEIsdUJBQXFCYyxDQUFyQiwrQkFBUDtBQUNEOztBQUVELFFBQUtDLEVBQUVGLE1BQUYsR0FBVyxDQUFaLElBQW1CRyxPQUFPLENBQTlCLEVBQWtDO0FBQ2hDLGFBQU9oQixvQkFBa0JjLENBQWxCLG9DQUFQO0FBQ0Q7QUFFRjs7QUFHRCxTQUFPLEVBQUVaLFFBQVEsSUFBVixFQUFQO0FBRUQsQ0F0Q0Q7O0FBNENBLElBQU1nQixVQUFvQixTQUFwQkEsT0FBb0IsQ0FBQ1QsRUFBRDtBQUFBLFNBQXFCRCxXQUFXQyxFQUFYLEVBQWVQLE1BQXBDO0FBQUEsQ0FBMUI7O0FBTUEsSUFBTWlCLGFBQXVCLFNBQXZCQSxVQUF1QixDQUFDVixFQUFEO0FBQUEsU0FFeEJXLE9BQU9DLFNBQVAsQ0FBaUJaLEVBQWpCLENBQUQsSUFDQ0EsTUFBTSxDQURQLElBRUNBLE1BQU0sVUFKa0I7QUFBQSxDQUE3QixDLENBSXdCOzs7QUFNeEIsSUFBTWEsa0JBQTRCLFNBQTVCQSxlQUE0QixDQUFDYixFQUFELEVBQXdCOztBQUV4RCxNQUFJLENBQUVXLE9BQU9DLFNBQVAsQ0FBaUJaLEVBQWpCLENBQU4sRUFBNkI7QUFBRSxVQUFNLElBQUljLFNBQUosQ0FBYyx1Q0FBZCxDQUFOO0FBQStEOztBQUU5RixVQUFZZCxNQUFNLEVBQVAsR0FBYSxJQUF4QixXQUFtQ0EsTUFBTSxFQUFQLEdBQWEsSUFBL0MsV0FBMERBLE1BQU0sQ0FBUCxHQUFZLElBQXJFLFdBQStFQSxLQUFLLElBQXBGLEVBSndELENBSXNDO0FBRS9GLENBTkQ7O0FBWUEsU0FBU2UsVUFBVCxDQUFvQkMsQ0FBcEIsRUFBK0JWLENBQS9CLEVBQTBDVyxDQUExQyxFQUFxREMsQ0FBckQsRUFBNEU7O0FBRXhFLE9BQUtGLENBQUwsR0FBU0EsQ0FBVDtBQUNBLE9BQUtWLENBQUwsR0FBU0EsQ0FBVDtBQUNBLE9BQUtXLENBQUwsR0FBU0EsQ0FBVDtBQUNBLE9BQUtDLENBQUwsR0FBU0EsQ0FBVDs7QUFFQSxTQUFPLElBQVA7QUFFSDs7QUFNRCxJQUFNQyxzQkFBZ0MsU0FBaENBLG1CQUFnQztBQUFBLE1BQUVILENBQUYsUUFBRUEsQ0FBRjtBQUFBLE1BQUtWLENBQUwsUUFBS0EsQ0FBTDtBQUFBLE1BQVFXLENBQVIsUUFBUUEsQ0FBUjtBQUFBLE1BQVdDLENBQVgsUUFBV0EsQ0FBWDtBQUFBLFNBRS9CRixDQUYrQixTQUUxQlYsQ0FGMEIsU0FFckJXLENBRnFCLFNBRWhCQyxDQUZnQjtBQUFBLENBQXRDOztBQVFBLElBQU1FLFVBQW9CLFNBQXBCQSxPQUFvQixDQUFDcEIsRUFBRCxFQUFvQjs7QUFFNUMsTUFBSSxPQUFPQSxFQUFQLEtBQWMsUUFBbEIsRUFBNEI7QUFDMUIsV0FBT2EsZ0JBQWdCYixFQUFoQixDQUFQO0FBQ0QsR0FGRCxNQUlLLElBQUlBLGNBQWNlLFVBQWxCLEVBQThCO0FBQ2pDLFdBQU9JLG9CQUFvQkosVUFBcEIsQ0FBUDtBQUNELEdBRkksTUFJQSxJQUFJTixRQUFRVCxFQUFSLENBQUosRUFBaUI7QUFBRSxXQUFPQSxFQUFQO0FBQVk7O0FBRXBDLFFBQU0sSUFBSXFCLEtBQUosQ0FBVSx1Q0FBVixDQUFOO0FBRUQsQ0FkRDs7QUFvQkEsSUFBTUMsaUJBQTJCLFNBQTNCQSxjQUEyQixDQUFDdEIsRUFBRCxFQUF3Qjs7QUFFckQsTUFBSUEsY0FBY2UsVUFBbEIsRUFBOEI7QUFBRSxXQUFPZixFQUFQO0FBQVk7O0FBRTVDLE1BQU11QixRQUF1QkgsUUFBUXBCLEVBQVIsRUFBWUcsS0FBWixDQUFrQixHQUFsQixFQUNZcUIsR0FEWixDQUNpQixVQUFDQyxDQUFEO0FBQUEsV0FBdUJqQixTQUFTaUIsQ0FBVCxFQUFZLEVBQVosQ0FBdkI7QUFBQSxHQURqQixDQUE3Qjs7QUFHQSw0Q0FBV1YsVUFBWCxtQ0FBMEJRLEtBQTFCO0FBRUgsQ0FURDs7UUFrQklkLE8sR0FBQUEsTztRQUNFVixVLEdBQUFBLFU7UUFFRmMsZSxHQUFBQSxlO1FBRUFFLFUsR0FBQUEsVTtRQUNBSSxtQixHQUFBQSxtQjtRQUtBVCxVLEdBQUFBLFU7UUFNQVksYyxHQUFBQSxjO1FBZ0NBM0IsSyxHQUFBQSxLIiwiZmlsZSI6ImlzX2lwdjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHtcblxuICBJcCxcbiAgUmVzdWx0XG5cbn0gZnJvbSAnLi90eXBlcyc7XG5cblxuXG5cblxuY29uc3QgZmFpbDogRnVuY3Rpb24gPSAod2h5OiBzdHJpbmcpOiBSZXN1bHQgPT4gKHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiB3aHkgfSk7XG5cblxuXG5cblxuY29uc3QgY2hlY2s6IEZ1bmN0aW9uID0gKF9pcDogSXApOiBib29sZWFuID0+IGZhbHNlO1xuXG5cblxuXG5cbmNvbnN0IGxldHRlckZpbHRlcjogUmVnRXhwID0gbmV3IFJlZ0V4cCgnXlswLTlcXFxcLl0rJCcpO1xuXG5cblxuXG5cbmNvbnN0IGlzX3F1YWRfZXg6IEZ1bmN0aW9uID0gKGlwOiBJcCk6IFJlc3VsdCA9PiB7XG5cbiAgaWYgKCEoIHR5cGVvZihpcCkgPT09ICdzdHJpbmcnICkpIHtcbiAgICByZXR1cm4gZmFpbCgnQWxsIHF1YWRzIGFyZSBzdHJpbmdzJyk7XG4gIH1cblxuICBpZiAoISggbGV0dGVyRmlsdGVyLnRlc3QoaXApICkpIHtcbiAgICByZXR1cm4gZmFpbCgnQSBxdWFkIG1heSBvbmx5IGNvbnRhaW4gMC05IGFuZCBwZXJpb2QnKTtcbiAgfVxuXG5cbiAgY29uc3QgcXVhZDogQXJyYXk8c3RyaW5nPiA9IGlwLnNwbGl0KCcuJyk7XG4gIGlmICghKHF1YWQubGVuZ3RoID09PSA0KSkgeyByZXR1cm4gZmFpbCgnQWxsIGNvbXBsZXRlIHF1YWRzIGhhdmUgZm91ciBieXRlcyBzZXBhcmF0ZWQgYnkgcGVyaW9kcycpOyB9XG5cblxuICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpPDQ7ICsraSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZwL25vLWxvb3BzXG5cbiAgICBjb25zdCBiOiBzdHJpbmcgPSBxdWFkW2ldO1xuICAgIGlmIChiLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gZmFpbChgQnl0ZSAke2l9IG11c3Qgbm90IGJlIGVtcHR5YCk7IH1cblxuICAgIGNvbnN0IGJ0OiBudW1iZXIgPSBwYXJzZUludChiLCAxMCk7XG5cbiAgICAvLyBuZWVkbid0IGNoZWNrIGJlbG93IHplcm8sIGJlY2F1c2UgY2hhcmFjdGVyIGZpbHRlciBwcmV2ZW50cyBtaW51cyBzaWduc1xuICAgIGlmIChidCA+IDI1NSkgeyByZXR1cm4gZmFpbChgQnl0ZSAke2l9IG11c3QgYmUgYmVsb3cgMjU2YCk7IH1cblxuICAgIGlmICgoYlswXSA9PT0gJzAnKSAmJiAoYnQgPiAwKSkge1xuICAgICAgcmV0dXJuIGZhaWwoYE5vbnplcm8gYnl0ZSAke2l9IG11c3Qgbm90IGJlZ2luIHdpdGggemVyb2ApO1xuICAgIH1cblxuICAgIGlmICgoYi5sZW5ndGggPiAxKSAmJiAoYnQgPT09IDApKSB7XG4gICAgICByZXR1cm4gZmFpbChgWmVybyBieXRlICR7aX0gbXVzdCBub3QgaGF2ZSBtdWx0aXBsZSB6ZXJvZXNgKTtcbiAgICB9XG5cbiAgfVxuXG5cbiAgcmV0dXJuIHsgcmVzdWx0OiB0cnVlIH07XG5cbn07XG5cblxuXG5cblxuY29uc3QgaXNfcXVhZDogRnVuY3Rpb24gPSAoaXA6IElwKTogYm9vbGVhbiA9PiBpc19xdWFkX2V4KGlwKS5yZXN1bHQ7XG5cblxuXG5cblxuY29uc3QgaXNfaW50ZWdlcjogRnVuY3Rpb24gPSAoaXA6IG51bWJlcik6IGJvb2xlYW4gPT5cblxuICAgIChOdW1iZXIuaXNJbnRlZ2VyKGlwKSlcbiAmJiAoaXAgPj0gMClcbiAmJiAoaXAgPD0gNDI5NDk2NzI5NSk7IC8vIDI1NS4yNTUuMjU1LjI1NVxuXG5cblxuXG5cbmNvbnN0IGludGVnZXJfdG9fcXVhZDogRnVuY3Rpb24gPSAoaXA6IG51bWJlcik6IHN0cmluZyA9PiB7XG5cbiAgaWYgKCEoTnVtYmVyLmlzSW50ZWdlcihpcCkpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludGVnZXJfdG9fcXVhZCBhY2NlcHRzIG9ubHkgaW50ZWdlcnMnKTsgfVxuXG4gIHJldHVybiBgJHsoKGlwID4+IDI0KSAmIDB4RkYpfS4keygoaXAgPj4gMTYpICYgMHhGRil9LiR7KChpcCA+PiA4KSAmIDB4RkYpfS4keyhpcCAmIDB4RkYpfWA7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWJpdHdpc2VcblxufTtcblxuXG5cblxuXG5mdW5jdGlvbiBQYXJzZWRRdWFkKGE6IG51bWJlciwgYjogbnVtYmVyLCBjOiBudW1iZXIsIGQ6IG51bWJlcik6IFBhcnNlZFF1YWQge1xuXG4gICAgdGhpcy5hID0gYTtcbiAgICB0aGlzLmIgPSBiO1xuICAgIHRoaXMuYyA9IGM7XG4gICAgdGhpcy5kID0gZDtcblxuICAgIHJldHVybiB0aGlzO1xuXG59XG5cblxuXG5cblxuY29uc3QgcGFyc2VkX3F1YWRfdG9fcXVhZDogRnVuY3Rpb24gPSAoe2EsIGIsIGMsIGR9KTogc3RyaW5nID0+XG5cbiAgICBgJHthfS4ke2J9LiR7Y30uJHtkfWA7XG5cblxuXG5cblxuY29uc3QgYXNfcXVhZDogRnVuY3Rpb24gPSAoaXA6IElwKTogc3RyaW5nID0+IHtcblxuICBpZiAodHlwZW9mIGlwID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBpbnRlZ2VyX3RvX3F1YWQoaXApO1xuICB9XG5cbiAgZWxzZSBpZiAoaXAgaW5zdGFuY2VvZiBQYXJzZWRRdWFkKSB7XG4gICAgcmV0dXJuIHBhcnNlZF9xdWFkX3RvX3F1YWQoUGFyc2VkUXVhZCk7XG4gIH1cblxuICBlbHNlIGlmIChpc19xdWFkKGlwKSkgeyByZXR1cm4gaXA7IH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBjb25zdHJ1Y3QgcXVhZCBmcm9tIHRoaXMgaW5wdXQnKTtcblxufTtcblxuXG5cblxuXG5jb25zdCBhc19wYXJzZWRfcXVhZDogRnVuY3Rpb24gPSAoaXA6IElwKTogUGFyc2VkUXVhZCA9PiB7XG5cbiAgICBpZiAoaXAgaW5zdGFuY2VvZiBQYXJzZWRRdWFkKSB7IHJldHVybiBpcDsgfVxuXG4gICAgY29uc3QgYnl0ZXM6IEFycmF5PG51bWJlcj4gPSBhc19xdWFkKGlwKS5zcGxpdCgnLicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoIChzOiBzdHJpbmcpOiBudW1iZXIgPT4gcGFyc2VJbnQocywgMTApKTtcblxuICAgIHJldHVybiBuZXcgUGFyc2VkUXVhZCguLi4gYnl0ZXMpO1xuXG59O1xuXG5cblxuXG5leHBvcnQge1xuXG4vLyAgICBpc19zaW1wbGUsXG5cbiAgICBpc19xdWFkLFxuICAgICAgaXNfcXVhZF9leCxcblxuICAgIGludGVnZXJfdG9fcXVhZCxcblxuICAgIFBhcnNlZFF1YWQsXG4gICAgcGFyc2VkX3F1YWRfdG9fcXVhZCxcblxuLy8gICAgaXNfaW5jb21wbGV0ZV9xdWFkLFxuLy8gICAgICBpc19pbmNvbXBsZXRlX3F1YWRfZXgsXG5cbiAgICBpc19pbnRlZ2VyLFxuXG4gLy8gICAgaXNfY29tcGxleCwgIC8vIGhhcyBwb3J0IG9yIHN1Ym5ldCBtYXNrXG4gLy8gICAgaXNfY29tcGxleF9xdWFkLFxuIC8vICAgIGlzX2NvbXBsZXhfaW50ZWdlcixcblxuICAgIGFzX3BhcnNlZF9xdWFkLFxuIC8vICAgIGFzX3F1YWQsXG4gLy8gICAgYXNfaW50ZWdlcixcblxuIC8vICAgIGlzX3JhbmdlLFxuIC8vICAgIGlzX2N1cnJlbnRfbmV0d29yayxcblxuIC8vICAgIGlzX3NwZWNpYWwsXG4gLy8gICAgaXNfbG9vcGJhY2ssXG4gLy8gICAgaXNfbGlua19sb2NhbCxcbiAvLyAgICBpc19pZXRmX3Byb3RvY29sLFxuIC8vICAgIGlzX2lwdjZfdG9faXB2NF9yZWxheSxcbiAvLyAgICBpc19iZW5jaG1hcmssXG5cbiAvLyAgICBpc190ZXN0bmV0LFxuIC8vICAgICAgaXNfdGVzdG5ldF8xLFxuIC8vICAgICAgaXNfdGVzdG5ldF8yLFxuIC8vICAgICAgaXNfdGVzdG5ldF8zLFxuXG4gLy8gICAgaXNfcHJpdmF0ZSxcbiAvLyAgICAgIGlzX3ByaXZhdGVfMTAsXG4gLy8gICAgICBpc19wcml2YXRlXzE3MixcbiAvLyAgICAgIGlzX3ByaXZhdGVfMTkyLFxuXG4gLy8gICAgaXNfc2hhcmVkLFxuIC8vICAgIGlzX2xpbmssXG4gLy8gICAgaXNfbXVsdGljYXN0LFxuIC8vICAgIGlzX2Jyb2FkY2FzdCxcbiAvLyAgICBpc19zdWJuZXQsXG4gLy8gICAgaXNfc3VibmV0X2Jyb2FkY2FzdCxcbiAvLyAgICBpc19yZXNlcnZlZCxcblxuICAgIGNoZWNrXG5cbn07XG4iXX0=