'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});


var fail = function fail(why) {
  return { result: false, reason: why };
};

var check = function check(_ip) {
  return false;
};

var letterFilter = new RegExp('^[0-9\\.]+$');

var is_quad_ex = function is_quad_ex(ip) {

  if (!(typeof ip === 'string')) {
    return fail('All quads are strings');
  }

  if (!letterFilter.test(ip)) {
    return fail('A quad may only contain 0-9 and period');
  }

  var quad = ip.split('.');
  if (!(quad.length === 4)) {
    return fail('All complete quads have four bytes separated by periods');
  }

  for (var i = 0; i < 4; ++i) {
    // eslint-disable-line fp/no-loops

    var b = quad[i];
    if (b.length === 0) {
      return fail('Byte ' + i + ' must not be empty');
    }

    var bt = parseInt(b, 10);

    // needn't check below zero, because character filter prevents minus signs
    if (bt > 255) {
      return fail('Byte ' + i + ' must be below 256');
    }

    if (b[0] === '0' && bt > 0) {
      return fail('Nonzero byte ' + i + ' must not begin with zero');
    }

    if (b.length > 1 && bt === 0) {
      return fail('Zero byte ' + i + ' must not have multiple zeroes');
    }
  }

  return { result: true };
};

var is_quad = function is_quad(ip) {
  return is_quad_ex(ip).result;
};

exports.is_quad = is_quad;
exports.is_quad_ex = is_quad_ex;
exports.check = check;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9qcy9pc19pcHY0LmpzIl0sIm5hbWVzIjpbImZhaWwiLCJ3aHkiLCJyZXN1bHQiLCJyZWFzb24iLCJjaGVjayIsIl9pcCIsImxldHRlckZpbHRlciIsIlJlZ0V4cCIsImlzX3F1YWRfZXgiLCJpcCIsInRlc3QiLCJxdWFkIiwic3BsaXQiLCJsZW5ndGgiLCJpIiwiYiIsImJ0IiwicGFyc2VJbnQiLCJpc19xdWFkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBY0EsSUFBTUEsT0FBaUIsU0FBakJBLElBQWlCLENBQUNDLEdBQUQ7QUFBQSxTQUEwQixFQUFFQyxRQUFRLEtBQVYsRUFBaUJDLFFBQVFGLEdBQXpCLEVBQTFCO0FBQUEsQ0FBdkI7O0FBTUEsSUFBTUcsUUFBa0IsU0FBbEJBLEtBQWtCLENBQUNDLEdBQUQ7QUFBQSxTQUFzQixLQUF0QjtBQUFBLENBQXhCOztBQU1BLElBQU1DLGVBQXVCLElBQUlDLE1BQUosQ0FBVyxhQUFYLENBQTdCOztBQU1BLElBQU1DLGFBQXVCLFNBQXZCQSxVQUF1QixDQUFDQyxFQUFELEVBQW9COztBQUUvQyxNQUFJLEVBQUcsT0FBT0EsRUFBUCxLQUFlLFFBQWxCLENBQUosRUFBa0M7QUFDaEMsV0FBT1QsS0FBSyx1QkFBTCxDQUFQO0FBQ0Q7O0FBRUQsTUFBSSxDQUFHTSxhQUFhSSxJQUFiLENBQWtCRCxFQUFsQixDQUFQLEVBQWdDO0FBQzlCLFdBQU9ULEtBQUssd0NBQUwsQ0FBUDtBQUNEOztBQUdELE1BQU1XLE9BQXNCRixHQUFHRyxLQUFILENBQVMsR0FBVCxDQUE1QjtBQUNBLE1BQUksRUFBRUQsS0FBS0UsTUFBTCxLQUFnQixDQUFsQixDQUFKLEVBQTBCO0FBQUUsV0FBT2IsS0FBSyx5REFBTCxDQUFQO0FBQXlFOztBQUdyRyxPQUFLLElBQUljLElBQVksQ0FBckIsRUFBd0JBLElBQUUsQ0FBMUIsRUFBNkIsRUFBRUEsQ0FBL0IsRUFBa0M7QUFBRTs7QUFFbEMsUUFBTUMsSUFBWUosS0FBS0csQ0FBTCxDQUFsQjtBQUNBLFFBQUlDLEVBQUVGLE1BQUYsS0FBYSxDQUFqQixFQUFvQjtBQUFFLGFBQU9iLGVBQWFjLENBQWIsd0JBQVA7QUFBNkM7O0FBRW5FLFFBQU1FLEtBQWFDLFNBQVNGLENBQVQsRUFBWSxFQUFaLENBQW5COztBQUVBO0FBQ0EsUUFBSUMsS0FBSyxHQUFULEVBQWM7QUFBRSxhQUFPaEIsZUFBYWMsQ0FBYix3QkFBUDtBQUE2Qzs7QUFFN0QsUUFBS0MsRUFBRSxDQUFGLE1BQVMsR0FBVixJQUFtQkMsS0FBSyxDQUE1QixFQUFnQztBQUM5QixhQUFPaEIsdUJBQXFCYyxDQUFyQiwrQkFBUDtBQUNEOztBQUVELFFBQUtDLEVBQUVGLE1BQUYsR0FBVyxDQUFaLElBQW1CRyxPQUFPLENBQTlCLEVBQWtDO0FBQ2hDLGFBQU9oQixvQkFBa0JjLENBQWxCLG9DQUFQO0FBQ0Q7QUFFRjs7QUFHRCxTQUFPLEVBQUVaLFFBQVEsSUFBVixFQUFQO0FBRUQsQ0F0Q0Q7O0FBNENBLElBQU1nQixVQUFvQixTQUFwQkEsT0FBb0IsQ0FBQ1QsRUFBRDtBQUFBLFNBQXFCRCxXQUFXQyxFQUFYLEVBQWVQLE1BQXBDO0FBQUEsQ0FBMUI7O1FBVUlnQixPLEdBQUFBLE87UUFDRVYsVSxHQUFBQSxVO1FBeUNGSixLLEdBQUFBLEsiLCJmaWxlIjoiaXNfaXB2NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUge1xuXG4gIElwLFxuICBSZXN1bHRcblxufSBmcm9tICcuL3R5cGVzJztcblxuXG5cblxuXG5jb25zdCBmYWlsOiBGdW5jdGlvbiA9ICh3aHk6IHN0cmluZyk6IFJlc3VsdCA9PiAoeyByZXN1bHQ6IGZhbHNlLCByZWFzb246IHdoeSB9KTtcblxuXG5cblxuXG5jb25zdCBjaGVjazogRnVuY3Rpb24gPSAoX2lwOiBJcCk6IGJvb2xlYW4gPT4gZmFsc2U7XG5cblxuXG5cblxuY29uc3QgbGV0dGVyRmlsdGVyOiBSZWdFeHAgPSBuZXcgUmVnRXhwKCdeWzAtOVxcXFwuXSskJyk7XG5cblxuXG5cblxuY29uc3QgaXNfcXVhZF9leDogRnVuY3Rpb24gPSAoaXA6IElwKTogUmVzdWx0ID0+IHtcblxuICBpZiAoISggdHlwZW9mKGlwKSA9PT0gJ3N0cmluZycgKSkge1xuICAgIHJldHVybiBmYWlsKCdBbGwgcXVhZHMgYXJlIHN0cmluZ3MnKTtcbiAgfVxuXG4gIGlmICghKCBsZXR0ZXJGaWx0ZXIudGVzdChpcCkgKSkge1xuICAgIHJldHVybiBmYWlsKCdBIHF1YWQgbWF5IG9ubHkgY29udGFpbiAwLTkgYW5kIHBlcmlvZCcpO1xuICB9XG5cblxuICBjb25zdCBxdWFkOiBBcnJheTxzdHJpbmc+ID0gaXAuc3BsaXQoJy4nKTtcbiAgaWYgKCEocXVhZC5sZW5ndGggPT09IDQpKSB7IHJldHVybiBmYWlsKCdBbGwgY29tcGxldGUgcXVhZHMgaGF2ZSBmb3VyIGJ5dGVzIHNlcGFyYXRlZCBieSBwZXJpb2RzJyk7IH1cblxuXG4gIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGk8NDsgKytpKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnAvbm8tbG9vcHNcblxuICAgIGNvbnN0IGI6IHN0cmluZyA9IHF1YWRbaV07XG4gICAgaWYgKGIubGVuZ3RoID09PSAwKSB7IHJldHVybiBmYWlsKGBCeXRlICR7aX0gbXVzdCBub3QgYmUgZW1wdHlgKTsgfVxuXG4gICAgY29uc3QgYnQ6IG51bWJlciA9IHBhcnNlSW50KGIsIDEwKTtcblxuICAgIC8vIG5lZWRuJ3QgY2hlY2sgYmVsb3cgemVybywgYmVjYXVzZSBjaGFyYWN0ZXIgZmlsdGVyIHByZXZlbnRzIG1pbnVzIHNpZ25zXG4gICAgaWYgKGJ0ID4gMjU1KSB7IHJldHVybiBmYWlsKGBCeXRlICR7aX0gbXVzdCBiZSBiZWxvdyAyNTZgKTsgfVxuXG4gICAgaWYgKChiWzBdID09PSAnMCcpICYmIChidCA+IDApKSB7XG4gICAgICByZXR1cm4gZmFpbChgTm9uemVybyBieXRlICR7aX0gbXVzdCBub3QgYmVnaW4gd2l0aCB6ZXJvYCk7XG4gICAgfVxuXG4gICAgaWYgKChiLmxlbmd0aCA+IDEpICYmIChidCA9PT0gMCkpIHtcbiAgICAgIHJldHVybiBmYWlsKGBaZXJvIGJ5dGUgJHtpfSBtdXN0IG5vdCBoYXZlIG11bHRpcGxlIHplcm9lc2ApO1xuICAgIH1cblxuICB9XG5cblxuICByZXR1cm4geyByZXN1bHQ6IHRydWUgfTtcblxufTtcblxuXG5cblxuXG5jb25zdCBpc19xdWFkOiBGdW5jdGlvbiA9IChpcDogSXApOiBib29sZWFuID0+IGlzX3F1YWRfZXgoaXApLnJlc3VsdDtcblxuXG5cblxuXG5leHBvcnQge1xuXG4vLyAgICBpc19zaW1wbGUsXG5cbiAgICBpc19xdWFkLFxuICAgICAgaXNfcXVhZF9leCxcblxuLy8gICAgaXNfaW5jb21wbGV0ZV9xdWFkLFxuLy8gICAgICBpc19pbmNvbXBsZXRlX3F1YWRfZXgsXG4gLy8gICAgaXNfaW50ZWdlcixcblxuIC8vICAgIGlzX2NvbXBsZXgsICAvLyBoYXMgcG9ydCBvciBzdWJuZXQgbWFza1xuIC8vICAgIGlzX2NvbXBsZXhfcXVhZCxcbiAvLyAgICBpc19jb21wbGV4X2ludGVnZXIsXG5cbiAvLyAgICBhc19xdWFkLFxuIC8vICAgIGFzX2ludGVnZXIsXG5cbiAvLyAgICBpc19yYW5nZSxcbiAvLyAgICBpc19jdXJyZW50X25ldHdvcmssXG5cbiAvLyAgICBpc19zcGVjaWFsLFxuIC8vICAgIGlzX2xvb3BiYWNrLFxuIC8vICAgIGlzX2xpbmtfbG9jYWwsXG4gLy8gICAgaXNfaWV0Zl9wcm90b2NvbCxcbiAvLyAgICBpc19pcHY2X3RvX2lwdjRfcmVsYXksXG4gLy8gICAgaXNfYmVuY2htYXJrLFxuXG4gLy8gICAgaXNfdGVzdG5ldCxcbiAvLyAgICAgIGlzX3Rlc3RuZXRfMSxcbiAvLyAgICAgIGlzX3Rlc3RuZXRfMixcbiAvLyAgICAgIGlzX3Rlc3RuZXRfMyxcblxuIC8vICAgIGlzX3ByaXZhdGUsXG4gLy8gICAgICBpc19wcml2YXRlXzEwLFxuIC8vICAgICAgaXNfcHJpdmF0ZV8xNzIsXG4gLy8gICAgICBpc19wcml2YXRlXzE5MixcblxuIC8vICAgIGlzX3NoYXJlZCxcbiAvLyAgICBpc19saW5rLFxuIC8vICAgIGlzX211bHRpY2FzdCxcbiAvLyAgICBpc19icm9hZGNhc3QsXG4gLy8gICAgaXNfc3VibmV0LFxuIC8vICAgIGlzX3N1Ym5ldF9icm9hZGNhc3QsXG4gLy8gICAgaXNfcmVzZXJ2ZWQsXG5cbiAgICBjaGVja1xuXG59O1xuIl19